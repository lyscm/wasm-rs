name: Deploy Website

on:
  push:
    branches:
      - master
    tags:
      - v*
    paths:
      - "**/*"
      - "!**/*.md"
      - "!**/.gitignore"
      - "!docs/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.REPOSITORY_OWNER }}
  REPOSITORY_NAME: ${{ github.REPOSITORY }}
  AZ_STORAGE_ACCOUNT: tecuwecpasa
  AZ_QUEUE_NAME: gh-runner-scaler

jobs:
  scale-keda-queue-up:
    runs-on: ubuntu-latest
    steps:
      - name: '1 - Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: '2 - Scale Up Self Hosted'
        id: scaleJob
        run: |
          OUTPUT=$(az storage message put --queue-name "${{ env.AZ_QUEUE_NAME }}" --content "${{ github.run_id }}" --account-name "${{ env.AZ_STORAGE_ACCOUNT }}")
          echo "::set-output name=scaleJobId::$(echo "$OUTPUT" | grep "id" | sed 's/^.*: //' | sed 's/,*$//g')"
          echo "::set-output name=scaleJobPop::$(echo "$OUTPUT" | grep "popReceipt" | sed 's/^.*: //' | sed 's/,*$//g')"

      - name: '3 - Logout via Azure CLI'
        run: |
          az logout

    outputs:
      scaleJobId: ${{ steps.scaleJob.outputs.scaleJobId }}
      scaleJobPop: ${{ steps.scaleJob.outputs.scaleJobPop }}

  build:
    runs-on: ubuntu-latest    

    steps:
      - name: 1 - Checkout
        uses: actions/checkout@v2

      - name: 2 - Access Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 3 - Setup Registry Metadata
        run: |

          # Change all uppercase to lowercase
          IMAGE_ID=${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi

          # Set tag as nightly
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi

          # Use `latest` tag convention
          if [ "$VERSION" == "master" ]; then 
            VERSION=latest
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION
          fi

          # Use versioning tag convention
          TAGS="--tag ${IMAGE_ID}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${IMAGE_ID}:latest"
          fi

          # Set outputs
          echo "image-id=${IMAGE_ID}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "buildx-args=--cache-from "type=local,src=${{ github.WORKSPACE }}/.buildx-cache" \
            --cache-to "type=local,dest=${{ github.WORKSPACE }}/.buildx-cache" \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            --build-arg REPOSITORY_NAME=${{ env.REPOSITORY_NAME }} \
            ${TAGS} \
            ." >> $GITHUB_ENV

      - name: 4 - Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: 5 - Setup Build
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: 6 - Setup Caching
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.REPOSITORY_NAME }}-${{ hashfiles('.buildx-cache/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.REPOSITORY_NAME }}-

      - name: 7 - Register Packages
        run: |
          docker buildx build --output "type=image,push=true" ${{ env.buildx-args }}
          docker buildx imagetools inspect ${{ env.image-id }}:${{ env.version }}

  deploy:
    runs-on: [self-hosted]
    needs: [ build, scale-keda-queue-up ]
    steps:

    - name: '1 - Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: '2 - Deploy Webapp'
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'biography-site'
        images: 'ghcr.io/lyscm/wasm-rs:latest'

    - name: '3 - Logout via Azure CLI'
      run: |
        az logout

  scale-keda-queue-down:
    runs-on: ubuntu-latest
    needs: [ deploy, scale-keda-queue-up ]
    steps:
      - name: '1 - Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: '2 - Scale Down Self Hosted'
        run: |
          az storage message delete --id ${{needs.scale-keda-queue-up.outputs.scaleJobId}} --pop-receipt ${{needs.scale-keda-queue-up.outputs.scaleJobPop}} --queue-name "${{ env.AZ_QUEUE_NAME }}" --account-name "${{ env.AZ_STORAGE_ACCOUNT }}"
          
      - name: '3 - Logout via Azure CLI'
        run: |
          az logout